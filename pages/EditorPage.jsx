// pages/EditorPage.jsx
import React, { useState, useEffect } from 'react';
import Head from "next/head";
import dynamic from 'next/dynamic';
import stylesEditor from '@/styles/EditorPage.module.css';
import styles from '@/styles/Upload.module.css';
import pdfMake from 'pdfmake/build/pdfmake';
import pdfFonts from 'pdfmake/build/vfs_fonts';
import htmlToPdfmake from 'html-to-pdfmake';

// Carregamento dinâmico do React Quill (apenas no lado do cliente)
const ReactQuill = dynamic(
  () => import('react-quill'),
  { ssr: false }
);

// Importa o CSS do Quill
import 'react-quill/dist/quill.snow.css';

pdfMake.vfs = pdfFonts.pdfMake.vfs; // Configura as fontes do pdfmake

const TextEditor = ({ initialText = '' }) => {
  const [text, setText] = useState(initialText);
  const [showConfirmation, setShowConfirmation] = useState(false); // Estado para controlar a visibilidade da confirmação

  useEffect(() => {
    const storedText = sessionStorage.getItem('extractedText');
    if (storedText) {
      setText(storedText);
    }
  }, []);

  const handleTextChange = (content) => {
    setText(content);
  };

  const handleDownloadPdf = () => {
    setShowConfirmation(true); // Mostra a tela de confirmação
  };

  const confirmDownload = () => {
    const html = text;
    const docDefinition = {
      content: htmlToPdfmake(html)
    };

    pdfMake.createPdf(docDefinition).download('texto_extraido.pdf');
    setShowConfirmation(false);
  };

  const cancelDownload = (event) => {
    // Verifica se o clique foi no overlay e não na caixa de confirmação
    if (event.target === event.currentTarget) {
      setShowConfirmation(false);
    }
  };

  return (
    <>
      <Head>
        <title>LazyPDF</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className={styles.body}>
        <header className={styles.header}>
          <h1>LazyPDF</h1>
        </header>
        <article className={stylesEditor.article}>
          <h3>Editor de Texto</h3>
          <p>Edite ou faça download do texto escaneado da sua imagem.</p>
        </article>

        <button onClick={handleDownloadPdf} className={stylesEditor.downloadButton}> 
          <span className="material-symbols-outlined">Baixar PDF</span>
        </button>

        {showConfirmation && (
          <div className={`${stylesEditor.confirmationOverlay} ${showConfirmation ? stylesEditor['confirmationOverlay-enter'] : stylesEditor['confirmationOverlay-exit']}`} onClick={cancelDownload}>
            <div className={stylesEditor.confirmationBox} onClick={(e) => e.stopPropagation()}>
              <p>Deseja fazer o download do texto ou ainda precisa editar?</p>
              <div className={stylesEditor.confirmationButtons}>
                <button onClick={confirmDownload}>Baixar PDF</button>
                <button onClick={cancelDownload}>Voltar e editar</button>
              </div>
            </div>
          </div>
        )}

        <main className={stylesEditor.main}>
          <div className={stylesEditor.editorContainer}>
            <ReactQuill
              value={text}
              onChange={handleTextChange}
              className={stylesEditor.reactQuillEditor}
              modules={{
                toolbar: [
                  [{ 'header': [1, 2, 3, false] }],
                  ['bold', 'italic', 'underline', 'strike'],
                  [{ 'list': 'ordered' }, { 'list': 'bullet' }],
                  [{ 'indent': '-1' }, { 'indent': '+1' }],
                  [{ 'align': [] }],
                  ['link', 'image'],
                  ['clean']
                ],
              }}
            />
          </div>
        </main>
      </div>
    </>
  );
};

export default TextEditor;